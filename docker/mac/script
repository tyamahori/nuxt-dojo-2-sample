#!/bin/bash

# .env ファイルを .env.localからコピーして生成する
if [ ! -e '.env' ]; then
    echo envファイルを生成します。
    cp .env.local .env
    echo envファイルが生成されました。
fi

# localのループバックIPを一つ設定する
LOCAL_IP=$(grep LOCAL_IP .env | cut -d '=' -f2)
DOMAIN=$(grep DOMAIN .env | cut -d '=' -f2)

WEB=$(grep WEB_CONTAINER .env | cut -d '=' -f2)
APP=$(grep APP_CONTAINER .env | cut -d '=' -f2)

# macにて必要に応じて sudo ifconfig lo0 alias を叩く
if ifconfig | grep -i "$LOCAL_IP" >/dev/null; then
    echo "$LOCAL_IP" は有効です。
else
    echo "$LOCAL_IP" が無効なのでエイリアスを生成します。パスワードを入力してください。
    sudo ifconfig lo0 alias "$LOCAL_IP" up
fi

# コンテナ内のパス定義
REMOTE_NODE_DIR="/nuxt-dojo/node_modules"

# ローカルのパス定義
LOCAL_NODE_DIR="../../nuxt-dojo/node_modules"

# dockerコマンド定義
RUN_APP="docker exec -it ${APP}"

case "$1" in

"create")
    # イメージ、データボリュームの全消し。最初からやり直す場合に使用する。
    docker-compose down --rmi all --volumes --remove-orphans
    docker network prune -f
    docker container prune -f
    docker image prune -f
    docker volume prune -f
    rm -rf ${LOCAL_NODE_DIR}
    rm -rf ./web/ssl
    mkdir -p ./web/ssl
    mkcert -install
    mkcert -key-file ./web/ssl/key.pem -cert-file ./web/ssl/cert.pem "${DOMAIN}"

    docker-compose up -d --build

    ${RUN_APP} yarn
    docker cp "${APP}":"${REMOTE_NODE_DIR}" "${LOCAL_NODE_DIR}"
    ${RUN_APP} yarn dev

    ;;

"up")
    # docker-composeの単純な再起動
    docker-compose down
    docker-compose up -d
    ${RUN_APP} yarn
    ${RUN_APP} yarn dev
    docker ps -a
    ;;

"down")
    # docker-compose down
    docker-compose down
    docker container prune -f
    docker image prune -f
    docker images
    docker ps -a
    ;;

"web")
    docker exec -it "${WEB}" sh
    ;;

"app")
    docker exec -it "${APP}" sh
    ;;

"yarn")
    rm -rf "${LOCAL_NODE_DIR}"
    ${RUN_APP} yarn "${@:2}"
    docker cp "${APP}":"${REMOTE_NODE_DIR}" "${LOCAL_NODE_DIR}"
    ${RUN_APP} yarn dev
    ;;

"logs")
    docker-compose logs -f
    ;;

"clean-volume")
    docker volume prune -f
    ;;
esac
